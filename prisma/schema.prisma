// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id            String         @id
  email         String         @unique
  first_name    String?
  last_name     String?
  rawData       Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[]
  TaskList      TaskList[]
  Task          Task[]
  Document      Document[]
  Project       Project[]
}

model Organization {
  id            String    @id
  name          String
  image_url     String?
  logo_url      String?
  rawData       Json?
  createdByUser String
  createdBy     User      @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
}

model Project {
  id             Int           @id @default(autoincrement())
  name           String
  description    String?
  status         String
  dueDate        DateTime?
  taskLists      TaskList[]
  documents      Document[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  createdByUser  String
  createdBy      User          @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
}

model TaskList {
  id            Int       @id @default(autoincrement())
  projectId     Int
  name          String
  description   String?
  status        String
  dueDate       DateTime?
  tasks         Task[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdByUser String
  createdBy     User      @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
}

model Task {
  id            Int       @id @default(autoincrement())
  taskListId    Int
  name          String
  description   String?
  status        String
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  taskList      TaskList  @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  createdByUser String
  createdBy     User      @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
}

model Document {
  id              Int      @id @default(autoincrement())
  projectId       Int
  name            String
  markdownContent String
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdByUser   String
  createdBy       User     @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
}
